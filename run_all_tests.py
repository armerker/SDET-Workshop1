#!/usr/bin/env python3
"""
Comprehensive Test Runner for Banking UI Tests
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è
"""

import os
import sys
import subprocess
import json
import glob
from pathlib import Path


def run_command(command, check=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üöÄ –í—ã–ø–æ–ª–Ω—è—é: {command}")
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    if check and result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
        return False
    return True


def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üìã –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")

    required_files = [
        'tests/test_add_customer.py',
        'tests/test_customer_sorting.py',
        'tests/test_delete_customer.py',
        'tests/conftest.py',
        'pages/base_page.py',
        'pages/manager_page.py',
        'pages/customers_page.py',
        'utils/test_data_generator.py',
        'requirements.txt',
        'pytest.ini',
        'test-cases.md',
        'README.md'
    ]

    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)

    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:")
        for file in missing_files:
            print(f"   - {file}")
        return False

    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True


def check_test_cases():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤"""
    print("\nüìù –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ—Å—Ç-–∫–µ–π—Å—ã...")

    if not os.path.exists("test-cases.md"):
        print("‚ùå –§–∞–π–ª test-cases.md –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    with open("test-cases.md", "r", encoding="utf-8") as f:
        content = f.read()

    required_cases = ["TC_001", "TC_002", "TC_003"]
    missing_cases = []

    for case in required_cases:
        if case not in content:
            missing_cases.append(case)

    if missing_cases:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Å—Ç-–∫–µ–π—Å—ã: {missing_cases}")
        return False

    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True


def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("\nüß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã...")

    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
    if not run_command("pytest tests/ -v"):
        return False

    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    return True


def run_parallel_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    print("\n‚ö° –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã...")

    if not run_command("pytest tests/ -n auto --tb=short"):
        return False

    print("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    return True


def generate_allure_reports():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Allure –æ—Ç—á–µ—Ç—ã"""
    print("\nüìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é Allure –æ—Ç—á–µ—Ç—ã...")

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    os.makedirs("allure-results", exist_ok=True)
    os.makedirs("allure-report", exist_ok=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å Allure
    if not run_command("pytest tests/ --alluredir=allure-results"):
        return False

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    if not run_command("allure generate allure-results -o allure-report --clean"):
        print("‚ö†Ô∏è  Allure –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤")
        return True

    print("‚úÖ Allure –æ—Ç—á–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üéØ COMPREHENSIVE BANKING UI TESTS RUNNER")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    if not check_requirements():
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç-–∫–µ–π—Å—ã
    if not check_test_cases():
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    if not run_tests():
        sys.exit(1)

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
    if not run_parallel_tests():
        sys.exit(1)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Allure –æ—Ç—á–µ—Ç—ã (—Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –∑–∞–¥–∞–Ω–∏–∏)
    generate_allure_reports()

    print("\n" + "=" * 60)
    print("üéâ –í–°–ï –ó–ê–î–ê–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("=" * 60)
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("‚úÖ 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (Add Customer)")
    print("‚úÖ 2. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ (First Name)")
    print("‚úÖ 3. –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞")
    print("‚úÖ –î–æ–ø. –∑–∞–¥–∞–Ω–∏–µ 1: Allure –æ—Ç—á–µ—Ç—ã")
    print("‚úÖ –î–æ–ø. –∑–∞–¥–∞–Ω–∏–µ 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫")
    print("‚úÖ –î–æ–ø. –∑–∞–¥–∞–Ω–∏–µ 3: CI/CD –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å")
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:")
    print("   - allure-report/ (Allure –æ—Ç—á–µ—Ç)")
    print("   - allure-results/ (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ Allure)")
    print("\nüöÄ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤:")
    print("   allure open allure-report")


if __name__ == "__main__":
    main()